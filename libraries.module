<?php
// $Id$

/**
 * @file
 * External library handling for Drupal modules.
 */

/**
 * Helper function to build paths to libraries.
 *
 * @param $library
 *   The external library name to return the path for.
 * @param $base_path
 *   Whether to prefix the resulting path with base_path().
 *
 * @return
 *   The path to the specified library.
 *
 * @ingroup libraries
 */
function libraries_get_path($library, $base_path = FALSE) {
  static $libraries;

  if (!isset($libraries)) {
    $libraries = libraries_get_libraries();
  }

  $path = ($base_path ? base_path() : '');
  if (!isset($libraries[$library])) {
    // Most often, external libraries can be shared across multiple sites, so
    // we return sites/all/libraries as the default path.
    $path .= 'sites/all/libraries/' . $library;
  }
  else {
    $path .= $libraries[$library];
  }

  return $path;
}

/**
 * Return an array of library directories.
 *
 * Returns an array of library directories from the all-sites directory
 * (i.e. sites/all/libraries/), the profiles directory, and site-specific
 * directory (i.e. sites/somesite/libraries/). The returned array will be keyed
 * by the library name. Site-specific libraries are prioritized over libraries
 * in the default directories. That is, if a library with the same name appears
 * in both the site-wide directory and site-specific directory, only the
 * site-specific version will be listed.
 *
 * @return
 *   A list of library directories.
 *
 * @ingroup libraries
 */
function libraries_get_libraries() {
  global $profile;

  // When this function is called during Drupal's initial installation process,
  // the name of the profile that is about to be installed is stored in the
  // global $profile variable. At all other times, the regular system variable
  // contains the name of the current profile, and we can call variable_get()
  // to determine the profile.
  if (!isset($profile)) {
    $profile = variable_get('install_profile', 'default');
  }

  $directory = 'libraries';
  $searchdir = array();
  $config = conf_path();

  // Similar to 'modules' and 'themes' directories in the root directory,
  // certain distributions may want to place libraries into a 'libraries'
  // directory in Drupal's root directory.
  $searchdir[] = $directory;

  // The 'profiles' directory contains pristine collections of modules and
  // themes as organized by a distribution.  It is pristine in the same way
  // that /modules is pristine for core; users should avoid changing anything
  // there in favor of sites/all or sites/<domain> directories.
  if (file_exists("profiles/$profile/$directory")) {
    $searchdir[] = "profiles/$profile/$directory";
  }

  // Always search sites/all/*.
  $searchdir[] = 'sites/all/' . $directory;

  // Also search sites/<domain>/*.
  if (file_exists("$config/$directory")) {
    $searchdir[] = "$config/$directory";
  }

  // Retrieve list of directories.
  // @todo Core: Allow to scan for directories.
  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdir as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}

/**
 * Returns information about registered libraries.
 *
 * The returned information is unprocessed, i.e. as registered by modules.
 *
 * @param $library
 *   (optional) The internal name of a library to return registered information
 *   for, or FALSE if no library with the given name exists. If omitted,
 *   information about all libraries is returned.
 *
 * @return
 *   An associative array containing registered information for all libraries,
 *   or the registered information for the library specified by $name.
 *
 * @see hook_libraries_info()
 *
 * @todo Re-introduce support for include file plugin system - either by copying
 *   Wysiwyg's code, or directly switching to CTools.
 */
function libraries_info($library = NULL) {
  $libraries = &drupal_static(__FUNCTION__);

  if (!isset($libraries)) {
    $libraries = array();
    foreach (module_implements('libraries_info') as $module) {
      foreach (module_invoke($module, 'libraries_info') as $name => $properties) {
        $properties['module'] = $module;
        $properties['name'] = $name;

        $properties += array(
          'title' => $name,
          'vendor url' => '',
          'download url' => '',
          'path' => '',
          'version callback' => 'libraries_get_version',
          'version arguments' => array(),
          'files' => array(),
          'variants' => array(),
          'versions' => array(),
          'integration files' => array(),
        );

        $libraries[$name] = $properties;
      }
    }
    // Allow modules to alter the registered libraries.
    drupal_alter('libraries_info', $libraries);
  }

  if (isset($library)) {
    return !empty($libraries[$library]) ? $libraries[$library] : FALSE;
  }
  return $libraries;
}

/**
 * Detect libraries and library versions.
 *
 * @todo It makes little sense to pass $libraries by reference here. We need to
 *   figure out whether, and if, how we want to retain the processed
 *   information. I.e. either use a static cache here, or make libraries_info()
 *   conditionally invoke libraries_detect($name). D7 only way: Re-use
 *   drupal_static() of libraries_info() - but would still require to update the
 *   (DB) cache (there likely will be one soon).
 *   Also, we probably do not want to ALWAYS parse ALL possible libraries; rather,
 *   the requesting/consuming module likely wants to know whether a list of
 *   supported libraries (possibly those registered by itself, or in a certain
 *   "category") is available... Food for thought.
 *
 * @param $libraries
 *   An array of libraries to detect, as returned from libraries_info().
 *
 * @see libraries_info()
 */
function libraries_detect($libraries) {
  foreach ($libraries as $name => $library) {
    libraries_detect_library(&$libraries[$name]);
  }
  return $libraries;
}

/**
 * Tries to detect a library and its installed version.
 *
 * @param $library
 *   An associative array describing a single library, as returned from
 *   libraries_info(), passed by reference.
 */
function libraries_detect_library(&$library) {
  $library['installed'] = FALSE;
  $name = $library['name'];

  // Check whether the library exists.
  if (!isset($library['library path'])) {
    $library['library path'] = libraries_get_path($name);
  }
  if (!file_exists($library['library path'])) {
    $library['error'] = t('%library could not be found.', array('%library' => $library['title']));
    continue;
  }

  // Detect library version.
  // Special handling for named arguments (single array).
  if (!isset($library['version arguments'][0])) {
    $library['version arguments'] = array($library['version arguments']);
  }
  $library['version'] = call_user_func_array($library['version callback'], $library['version arguments']);
  if (empty($library['version'])) {
    $library['error'] = t('The version of %library could not be detected.', array('%library' => $library['title']));
    continue;
  }

  // Determine to which supported version the installed version maps.
  if (!empty($library['versions'])) {
    ksort($library['versions']);
    $version = 0;
    foreach ($library['versions'] as $supported_version => $version_properties) {
      if (version_compare($library['installed version'], $supported_version, '>=')) {
        $version = $supported_version;
      }
    }
    if (!$version) {
      $library['error'] = t('The installed version %version of %library is not supported.', array('%version' => $library['installed version'], '%library' => $library['title']));
      continue;
    }

    // Apply version specific definitions and overrides.
    $library = array_merge($library, $library['versions'][$version]);
    unset($library['versions']);
  }

  // If we end up here, the library should be usable.
  $library['installed'] = TRUE;
  if (!empty($library['path'])) {
    $library['library path'] .= '/' . $library['path'];
  }
}

