<?php
// $Id$

/**
 * @file
 * Tests for Libraries API.
 */

/**
 * Tests basic detection and loading of libraries.
 */
class LibrariesTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  public static function getInfo() {
    return array(
      'name' => 'Libraries detection and loading',
      'description' => 'Tests detection and loading of libraries.',
      'group' => 'Libraries API',
    );
  }

  function setUp() {
    parent::setUp('libraries', 'libraries_test');
  }

  /**
   * Tests libraries detection and loading.
   *
   * @todo Better method name(s); split into detection/loading/overloading/etc.
   */
  function testLibraries() {
    // Test a library specified with an .info file gets detected.
    $library = libraries_info('example');
    $expected = array(
      'title' => 'example',
      'vendor url' => '',
      'download url' => '',
      'path' => '',
      'version callback' => 'libraries_get_version',
      'version arguments' => array(),
      'files' => array(),
      'variants' => array(),
      'versions' => array(),
      'integration files' => array(),
    );
    $this->assertEqual($library, $expected, 'Library specified with an .info file found');

    // Test missing library.
    $library = libraries_info('example_missing');
    libraries_detect_library($library);
    $this->assertEqual($library['error'], 'not found', 'Non-existing library not found.');
    $error_message = t('%library could not be found.', array(
      '%library' => $library['title'],
    ));
    $this->assertEqual($library['error message'], $error_message, 'Correct error message for a missing library.');

    // Test unknown library version.
    $library = libraries_info('example_undetected_version');
    libraries_detect_library($library);
    $this->assertEqual($library['error'], 'not detected', 'Library version not found.');
    $error_message = t('The version of %library could not be detected.', array(
      '%library' => $library['title'],
    ));
    $this->assertEqual($library['error message'], $error_message, 'Correct error message for a library with an undetected version.');

    // Test unsupported library version.
    $library = libraries_info('example_unsupported_version');
    libraries_detect_library($library);
    $this->assertEqual($library['error'], 'not supported', 'Library version not supported.');
    $error_message = t('The installed version %version of %library is not supported.', array(
      '%version' => $library['version'],
      '%library' => $library['title'],
    ));
    $this->assertEqual($library['error message'], $error_message, 'Correct error message for a library with an unsupported version.');

    // Test supported library version.
    $library = libraries_info('example_supported_version');
    libraries_detect_library($library);
    $this->assertEqual($library['installed'], TRUE, 'Supported library version found.');

    // Test libraries_get_version().
    $library = libraries_info('example_default_version_callback');
    libraries_detect_library($library);
    $version = '2';
    $this->assertEqual($library['version'], $version, 'Expected version returned by default version callback.');

    // Test a multiple-parameter version callback.
    $library = libraries_info('example_multiple_parameter_version_callback');
    libraries_detect_library($library);
    $version = '2';
    $this->assertEqual($library['version'], $version, 'Expected version returned by multiple parameter version callback.');

    // Test a top-level files property.
    $library = libraries_info('example_simple');
    libraries_detect_library($library);
    $files = array(
      'js' => array('example_1.js'),
      'css' => array('example_1.css'),
      'php' => array('example_1.php'),
    );
    $this->assertEqual($library['files'], $files, 'Top-level files property works.');

    // Test version-specific library files.
    $library = libraries_info('example_versions');
    libraries_detect_library($library);
    $files = array(
      'js' => array('example_2.js'),
      'css' => array('example_2.css'),
      'php' => array('example_2.php'),
    );
    $this->assertEqual($library['files'], $files, 'Version-specific library files found.');

    // Test missing variant.
    $library = libraries_info('example_variant_missing');
    libraries_detect_library($library);
    $variants = array_keys($library['variants']);
    $this->assertEqual($library['variants']['example_variant']['error'], 'not found', 'Missing variant not found');
    $error_message = t('The %variant variant of %library could not be found.', array(
      '%variant' => $variants[0],
      '%library' => $library['title'],
    ));
    $this->assertEqual($library['variants']['example_variant']['error message'], $error_message, 'Correct error message for a missing variant.');

    // Test existing variant.
    $library = libraries_info('example_variant');
    libraries_detect_library($library);
    $this->assertEqual($library['variants']['example_variant']['installed'], TRUE, 'Existing variant found.');

    // Test loading of a simple library with a top-level files property.
    $this->drupalGet('libraries_test/simple');
    $this->assertLibraryFiles('example_1');

    // Test loading of integration files.
    $this->drupalGet('libraries_test/integration_files');
    $this->assertRaw('libraries_test.js', 'The JavaScript integration file is loaded.');
    $this->assertRaw('libraries_test.css', 'The CSS integration file is loaded.');
    $this->assertText('libraries_test.inc', 'The PHP integration file is loaded.');

    // Test version overloading.
    $this->drupalGet('libraries_test/versions');
    $this->assertLibraryFiles('example_2');

    // Test variant loading.
    $this->drupalGet('libraries_test/variant');
    $this->assertLibraryFiles('example_3');

    // Test version overloading and variant loading.
    $this->drupalGet('libraries_test/versions_and_variants');
    $this->assertLibraryFiles('example_4');
  }

  /**
   * Helper function to assert that a library was correctly loaded.
   *
   * Asserts that all the correct files were loaded and all the incorrect ones
   * were not.
   *
   * @param $name
   *   The name of the files that should be loaded. The current testing system
   *   knows of 'example_1', 'example_2', 'example_3' and 'example_4'. Each name
   *   has an associated JavaScript, CSS and PHP file that will be asserted. All
   *   other files will be asserted to not be loaded. See
   *   tests/example/README.txt for more information on how the loading of the
   *   files is tested.
   */
  function assertLibraryFiles($name) {
    $names = drupal_map_assoc(array('example_1', 'example_2', 'example_3', 'example_4'));
    unset($names[$name]);

    // Test that the wrong files are not loaded.
    foreach ($names as $filename) {
      $this->assertNoRaw("$filename.js", 'A wrong JavaScript file is not loaded.');
      $this->assertNoRaw("$filename.css", 'A wrong CSS file is not loaded.');
      $this->assertNoText("$filename.php", 'A wrong PHP file is not loaded.');
    }

    // Test that the correct files are loaded.
    $this->assertRaw("$name.js", 'The correct JavaScript file is loaded.');
    $this->assertRaw("$name.css", 'The correct CSS file is loaded.');
    $this->assertText("$name.php", 'The correct PHP file is loaded.');
  }

}

